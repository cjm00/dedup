#!/usr/bin/env python3

# This file must live in dedup/benchsuite! The file may be run from anywhere, but the script itself must reside in this subdirectory.

import os
import subprocess
import gzip
import argparse
import time
import platform
import shutil

from operator import itemgetter
from statistics import mean, median

BENCH_FILE_PATH = os.path.abspath(__file__)
BENCH_DIR = os.path.dirname(BENCH_FILE_PATH)
PROJECT_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), os.path.pardir))

TEST_DIR =  "corpustest"
BLOB_NAME = "europarl.txt"
CORPUS_NAME_GZ = "en.raw.tar.gz"
CORPUS_UNPACK_DIR = os.path.join("Europarl", "raw", "en")
CORPUS_URL = "opus.nlpl.eu/download.php?f=Europarl/en.raw.tar.gz"

DEDUP_BIN_NAME = "dedup" + (".exe" if platform.system() == 'Windows' else "")
DEDUP_BIN_PATH = os.path.join(PROJECT_PATH, "target", "release", DEDUP_BIN_NAME)

class Benchmarker():
    def __init__(self, name, warmup=1, count=3, commands=None, directory=None):
        self.name = name
        self.warmup = warmup
        self.count = count
        self.commands = commands or []
        self.directory = directory
    
    def run(self):
        times = []
        for _ in range(self.warmup):
            subprocess.run(self.commands, cwd=self.directory, stdout=subprocess.DEVNULL)

        for _ in range(self.count):
            start = time.time()
            subprocess.run(self.commands, cwd=self.directory, stdout=subprocess.DEVNULL)
            end = time.time()
            times.append(end - start)

        return times

def download_and_pack_corpus(directory):
    corpus_archive = os.path.join(directory, CORPUS_NAME_GZ)
    corpus_unpacked = os.path.join(directory, CORPUS_UNPACK_DIR)
    blob_location = os.path.join(directory, BLOB_NAME)

    if not os.path.isdir(directory):
        os.makedirs(directory)
    if not os.path.exists(corpus_unpacked):
        if not os.path.exists(CORPUS_NAME_GZ):
            print("Downloading test corpus...")
            subprocess.run(['curl', '-LO', CORPUS_URL], cwd=directory)
        print("Unpacking test corpus...")
        subprocess.run(['tar', '-xzf', CORPUS_NAME_GZ], cwd=directory)

    if not os.path.exists(blob_location):
        print("Concatenating files in to single blob...")
        with open(blob_location, 'wb+') as f:
            for entry in os.listdir(corpus_unpacked):
                entry = os.path.join(corpus_unpacked, entry)
                if os.path.isfile(entry):
                    with gzip.open(entry, 'rb') as g:
                        f.write(g.read())

def build_dedup():
    print("Building dedup...")
    proj_path = os.path.abspath(os.path.join(os.path.dirname(__file__), os.path.pardir))
    subprocess.run(['cargo', 'build', '--release'], cwd=proj_path)


def main():
    p = argparse.ArgumentParser("Command line deduplication tool benchmark runner.")
    p.add_argument(
        '--warmup', metavar='INTEGER', type=int, default=1,
        help='The number of iterations to run each command before '
        'the actual measurements begin.')
    p.add_argument(
        '--benches', metavar='INTEGER', type=int, default=3,
        help='The number of samples to take when performing measurements.'
    )
    p.add_argument(
        '--sortpath', metavar='SORTPATH', default='sort'
    )
    p.add_argument(
        '--run', metavar='TESTNAME', choices=["awk", "dedup", "sort", "all"], nargs='?', default="all"
    )
    p.add_argument(
        '--dir', metavar='TESTDIR', default=BENCH_DIR
    )
    args = p.parse_args()

    config = dict()
    config["count"] = args.benches
    config["warmup"] = args.warmup
    config["directory"] = os.path.join(args.dir, TEST_DIR)

    download_and_pack_corpus(config["directory"])

    if args.run in ["all", "dedup"]:
        build_dedup()

    BLOB_PATH = os.path.join(config["directory"], BLOB_NAME)

    benches = {
    "sort" : Benchmarker("sort", commands = [args.sortpath, '-u', BLOB_PATH], **config),
    "dedup" : Benchmarker("dedup", commands = [DEDUP_BIN_PATH, BLOB_PATH], **config),
    "awk" : Benchmarker("awk", commands = ['awk', '!seen[$0]++', BLOB_PATH], **config)
    }

    if args.run == "all":
        results = [(n, b.run()) for n, b in benches.items()]
        for testname, result in sorted(results, key=itemgetter(0)) :
            print("{} : mean: {:.4} median: {:.4}".format(testname, mean(result), median(result)))
    else:
        testname = args.run
        bench = benches[testname]
        result = bench.run()
        print("{} : mean: {:.4} median: {:.4}".format(testname, mean(result), median(result)))


if __name__ == '__main__':
    main()