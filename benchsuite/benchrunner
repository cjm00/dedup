#!/usr/bin/env python3
import os
import subprocess
import gzip
import argparse
import time
from statistics import mean, median

TEST_DIR = 'corpus'
BLOB_NAME = "europarl.txt"
CORPUS_NAME_GZ = "en.raw.tar.gz"
CORPUS_UNPACK_DIR = os.path.join("Europarl", "raw", "en")
CORPUS_URL = "opus.nlpl.eu/download.php?f=Europarl/en.raw.tar.gz"

class Benchmarker():
    def __init__(self, name, warmup=1, count=3, commands=None):
        self.name = name
        self.warmup = warmup
        self.count = count
        self.commands = commands or []
    
    def run(self):
        test_dir = os.path.join(os.getcwd(), TEST_DIR)
        times = []
        for _ in range(self.warmup):
            subprocess.run(self.commands, cwd=test_dir, stdout=subprocess.DEVNULL)

        for _ in range(self.count):
            start = time.time()
            subprocess.run(self.commands, cwd=test_dir, stdout=subprocess.DEVNULL)
            end = time.time()
            times.append(end - start)

        return times

def download_and_pack_corpus():
    test_dir = os.path.join(os.getcwd(), TEST_DIR)
    corpus_archive = os.path.join(test_dir, CORPUS_NAME_GZ)
    corpus_unpacked = os.path.join(test_dir, CORPUS_UNPACK_DIR)
    blob_location = os.path.join(test_dir, BLOB_NAME)

    if not os.path.isdir(test_dir):
        os.makedirs(test_dir)
    if not os.path.exists(corpus_unpacked):
        if not os.path.exists(CORPUS_NAME_GZ):
            print("Downloading test corpus...")
            subprocess.run(['curl', '-LO', CORPUS_URL], cwd=test_dir)
        print("Unpacking test corpus...")
        subprocess.run(['tar', '-xzf', CORPUS_NAME_GZ], cwd=test_dir)

    if not os.path.exists(blob_location):
        print("Concatenating files in to single blob...")
        with open(blob_location, 'wb+') as f:
            for entry in os.listdir(corpus_unpacked):
                entry = os.path.join(corpus_unpacked, entry)
                if os.path.isfile(entry):
                    with gzip.open(entry, 'rb') as g:
                        f.write(g.read())




def main():
    p = argparse.ArgumentParser("Command line deduplication tool benchmark runner.")
    p.add_argument(
        '--warmup', metavar='INTEGER', type=int, default=1,
        help='The number of iterations to run each command before '
        'the actual measurements begin.')
    p.add_argument(
        '--benches', metavar='INTEGER', type=int, default=3,
        help='The number of samples to take when performing measurements.'
    )
    p.add_argument(
        '--sortpath', metavar='SORTPATH', default='sort'
    )
    p.add_argument(
        '--run', metavar='TESTNAME', choices=["awk", "dedup", "sort", "all"], nargs='?', default="all"
    )
    args = p.parse_args()

    download_and_pack_corpus()

    bench_count = args.benches
    warmup_rounds = args.warmup

    benches = {
    "sort" : Benchmarker("sort", commands = "{sort} -u {target}".format(sort=args.sortpath, target=BLOB_NAME), warmup=warmup_rounds, count=bench_count),
    "dedup" : Benchmarker("dedup", commands = "dedup {}".format(BLOB_NAME), warmup=warmup_rounds, count=bench_count),
    "awk" : Benchmarker("awk", commands = "awk '!seen[$0]++' {}".format(BLOB_NAME), warmup=warmup_rounds, count=bench_count)
    }

    if args.run == "all":
        results = [(n, b.run()) for n, b in benches.items()]
        for testname, result in results :
            print("{} : mean: {:.4} median: {:.4}".format(testname, mean(result), median(result)))
    else:
        testname = args.run
        bench = benches[testname]
        result = bench.run()
        print("{} : mean: {:.4} median: {:.4}".format(testname, mean(result), median(result)))


if __name__ == '__main__':
    main()